/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recursividad;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author Juan
 */
public class panelMaze extends javax.swing.JPanel {

    /**
     * Creates new form panelMaze
     */
    public panelMaze() {
        initComponents();
    }

    private final int TRIED = 3;
    private final int PATH = 7;
    private int[][] grid
            = {{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0},
                {1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0},
                {0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
                {1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0},
                {1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
                {1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1}};

    public boolean traverse(int row, int colum) {
        boolean done = false;
        if (valid(row, colum)) {
            grid[row][colum] = TRIED;//celda ya probada
            if (row == grid.length - 1 && colum == grid[0].length - 1) {
                done = true; // el laberinto esta resuelto
            } else {
                done = traverse(row + 1, colum); //hacia abajo
                if (!done) {
                    done = traverse(row, colum + 1);//hacia la derecha
                }
                if (!done) {
                    done = traverse(row - 1, colum);//hacia arriba
                }
                if (!done) {
                    done = traverse(row, colum - 1);//hacia la izquierda
                }
            }
            if (done) {//marco que es igual a camino valido
                grid[row][colum] = PATH;
            }
        }
        return done;
    }

    private boolean valid(int row, int colum) {
        boolean result = false;
        //comprueba que esta dentro de la pared
        if (row >= 0 && row < grid.length && colum >= 0 & colum < grid[row].length) {
            if (grid[row][colum] == 1) {//comprueba que no sea pared
                return true;
            }
        }
        return result;
    }

    //url
    BufferedImage muro, paso;
    URL mur = getClass().getResource("/img/wall.png");
    URL pas = getClass().getResource("/img/path.jpg");

    public void paint(Graphics g) {//imprime el resultado del laberinto
        try {
            paso = ImageIO.read(pas);
            muro = ImageIO.read(mur);
        } catch (IOException ex) {
            Logger.getLogger(panelMaze.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int row = 0; row < grid.length; row++) {//recore las filas
            for (int column = 0; column < grid[row].length; column++) {//recorre las columnas de las proimeras filas
                if (grid[row][column] == 0) {//acumulador de las columnas, posicion de filas y colunas =0
                    g.drawImage(muro, column * 30, row * 30, 30, 30, null);
                } else if (grid[row][column] == 1) {//acumulador de las columnas, posicion de filas y colunas =1
                    g.drawImage(paso, column * 30, row * 30, 30, 30, null);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
